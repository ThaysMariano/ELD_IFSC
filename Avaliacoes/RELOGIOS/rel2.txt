-- unindo as partes

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity relogio is
   generic(
      CC_ACn : natural := 1
   );
        
	port
	(
		-- Input ports
		clk_50MHz : in std_logic;
		rst : in std_logic;
		stop: in std_logic;
		zopIn: in std_logic;

		-- Output ports
		SSD_UNIHH : out std_logic_vector(6 downto 0);
		SSD_DEZHH : out std_logic_vector(6 downto 0);
		SSD_UNIMM : out std_logic_vector(6 downto 0);
		SSD_DEZMM : out std_logic_vector(6 downto 0);
		SSD_UNISS : out std_logic_vector(6 downto 0);
		SSD_DEZSS : out std_logic_vector(6 downto 0)
	);
end entity;


architecture top_level of relogio is

--Declarando componentes que serao usados

	component bcd2ssd is
		generic(
			CC_ACn	: natural  :=	1
		);
		
		port(
			BCD	: in  std_logic_vector(3 downto 0);
			ZOP	: in 	std_logic;
			DPin	: in	std_logic;
			SSD	: out std_logic_vector(6 downto 0)
--			DPout		: out std_logic
		);
	end component;

	component counter0to50m is
		generic(
			LIMIT : natural := 22;
			N_BITS: natural := 5 --log na base 2 limite (0 a 31)
		);
		port(
			clk, reset: in std_logic;
			clk_out: out std_logic
		);
	end component;

	component counter0tox is
		generic(
			-- Limites
			D : natural := 5; 
			U : natural := 9  
		);
		port(
			clk, reset: in std_logic;
			unidade: out std_logic_vector(3 downto 0);
			dezena: out std_logic_vector(3 downto 0);
			clk_out : out std_logic
		);
	end component;
	
	--declarando fios internos
	
	signal clk_1sec, clk_1min, clk_1hr : std_logic;
	signal bcd_unihh, bcd_dezhh, bcd_unimm, bcd_dezmm, bcd_uniss, bcd_dezss : std_logic_vector(3 downto 0);
	
	begin
	

	--clock
    U1: counter0to50m
        generic map (

            LIMIT => 10, 
            N_BITS => 4 
        )
        port map (
            clk => clk_50MHz,
            reset => rst,
            clk_out => clk_1sec
        );

    --BCD segundos
    U2: counter0tox
        generic map (
            D => 5, 
            U => 9  
        )
        port map (
            clk => clk_1sec,
            reset => rst,
            unidade => bcd_uniss,
            dezena => bcd_dezss,
				clk_out => clk_1min
        );

    -- BCD minutos
    U3: counter0tox
        generic map (
            D => 5, 
            U => 9  
        )
        port map (
            clk => clk_1min,
            reset => rst,
            unidade => bcd_unimm,
            dezena => bcd_dezmm,
				clk_out => clk_1hr
        );

    -- BCD horas
    U4: counter0tox
        generic map (
            D => 2, 
            U => 3  
        )
        port map (
            clk => clk_1hr,
            reset => rst,
            unidade => bcd_unihh,
            dezena => bcd_dezhh,
				clk_out => open
        );

    -- Display de 7 segmentos
    -- U segundos
    U5: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_uniss,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_UNISS
--           DPout => open
        );

    -- D segundos
    U6: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_dezss,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_DEZSS
--           DPout => open
        );

    -- U minutos
    U7: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_unimm,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_UNIMM
 --          DPout => open
        );

    -- D minutos
    U8: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_dezmm,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_DEZMM
  --         DPout => open
        );

    -- U horas
    U9: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_unihh,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_UNIHH
 --          DPout => open
        );

    -- D horas
    U10: bcd2ssd
        generic map (
            CC_ACn => 1
        )
        port map (
            BCD => bcd_dezhh,
            ZOP => '0',
            DPin => '0',
            SSD => SSD_DEZHH
--            DPout => open
        );
		  
		  


end architecture;



---------------------------------
bcd

-- display de segmentos 

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity bcd2ssd is
	generic(
		CC_ACn	: natural  :=	1
	);
	
	port(
		BCD	: in  std_logic_vector(3 downto 0);
		ZOP	: in 	std_logic;
		DPin	: in	std_logic;
		SSD	: out std_logic_vector(6 downto 0);
		DPout		: out std_logic
	);
end entity;

architecture seven_segments of bcd2ssd is
	signal ssd_int: std_logic_vector(6 downto 0);
begin



L1: if CC_ACn = 1  generate
	SSD <= ssd_int;
	DPout <= DPin;
end generate;

L2: if CC_ACn = 0  generate
	SSD <= not(ssd_int);
	DPout <= not(DPin);
end generate;	
	

ssd_int <= 
	"1111110" when (BCD = "0000" and ZOP = '1') else
	"0110000" when BCD = "0001" else
	"1101101" when BCD = "0010" else 	
	"1111001" when BCD = "0011" else 	
	"0110011" when BCD = "0100" else 	
	"1011011" when BCD = "0101" else 	
	"1011111" when BCD = "0110" else 	
	"1110000" when BCD = "0111" else 	
	"1111111" when BCD = "1000" else 	
	"1111011" when BCD = "1001" else
	"0000000";
	

end architecture;



-----------------------------

divisorclock


-- clock 50MHz

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity divisorClock is
	generic(
		LIMIT : natural := 22;
		N: natural := 5 --log na base 2 de limite (0 a 31)
	);
	port(
		clk, reset, enable, stop: in std_logic;
		clk_out, enable_out: out std_logic
	);
end entity;

architecture contador of counter0to50m is

	signal r_reg: unsigned(N-1 downto 0);
	signal r_next: unsigned(N-1  downto 0);
	
begin

-- stop
-- max_pulse

-- enable - enable_out dura apenas 1 clock no final - em enable ele conta 
-- else r_reg <= r_reg


-- register
	process(clk,reset)
	begin
		if (reset='1') then
			r_reg <= (others=>'0');
		elsif (rising_edge(clk)) then  
				if (enable = '1') then
					r_reg <= r_next; 
				 else 
					r_reg <= r_reg;
				end if;	
		end if;
	end process;
	
	-- next-state logic
	r_next <= (others=>'0') when r_reg=(LIMIT-1) else r_reg + 1;
	
	
	-- output logic
	clk_out <= '0' when r_reg = to_unsigned(LIMIT-1,N) else '1';
	
	--- clk interno no process
	--  0 else clock (stop)

	
	
	
end architecture;


------------------------------

-- Contador relógio 23 59 59

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity counter0tox is
	generic(
		-- Limites
		D : natural := 5; 
		U : natural := 9  
	);
	port(
		clk, reset, enable: in std_logic;
		unidade: out std_logic_vector(3 downto 0);
		dezena: out std_logic_vector(3 downto 0);
		clk_out, enable_out : out std_logic
	);
end entity;

architecture counter0tox_arch of counter0tox is
	signal reg_unidade: unsigned(3 downto 0) := (others => '0');
	signal reg_dezena: unsigned(3 downto 0) := (others => '0');
	signal next_unidade: unsigned(3 downto 0);
	signal next_dezena: unsigned(3 downto 0);
	
begin
	-- Processo síncrono para atualizar os registradores
	process(clk, reset)
	
-- max_pulse	
-- enable - enable_out dura apenas 1 clock
-- else r_reg <= r_reg

	
	begin
		if reset = '1' then
			reg_unidade <= (others => '0');
			reg_dezena <= (others => '0');
		elsif rising_edge(clk) then
			if(enable = '1') then
				reg_unidade <= next_unidade;
				reg_dezena <= next_dezena;
			else 
				reg_unidade <= reg_unidade;
				reg_dezena <= reg_dezena;
			end if;
		end if;
	end process;

	-- Próximo valor da unidade
	next_unidade <= 
		(reg_unidade + 1) when (reg_unidade < 9 and (reg_dezena /= D or reg_unidade /= U)) else -- + até U
		(others => '0'); -- Zera em D e U
		
		
	-- Próximo valor da dezena
	next_dezena <= 
		(reg_dezena + 1) when (reg_unidade = U and reg_dezena < D) else -- + em u
		(others => '0') when (reg_unidade = U and reg_dezena = D) else -- Reinicia no limite
		reg_dezena; -- Mantem
		

		-- clk_out
		clk_out <= '0' when (reg_dezena = D and reg_unidade = U) else '1';

	-- Std_logic_vector nas saídas
	unidade <= std_logic_vector(reg_unidade);
	dezena <= std_logic_vector(reg_dezena);
	
	
	
					
			-- '0' when (stop = '1') else reg_dezena
		
			-- '0' when (stop = '1') else reg_unidade
		

end architecture;


